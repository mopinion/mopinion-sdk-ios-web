// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name MopinionSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import MopinionSDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public let MopinionSDK: MopinionSDK.Mopinion
@objc @_inheritsConvenienceInitializers public class Mopinion : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var globalParentView: UIKit.UIViewController?
  final public let useWebView: Swift.Bool
  public func load(_ mopinionKey: Foundation.NSString)
  public func load(_ mopinionKey: Swift.String)
  public func load(_ mopinionKey: Foundation.NSString, _ log: Swift.Bool)
  public func load(_ mopinionKey: Swift.String, _ log: Swift.Bool)
  public func event(_ parentView: UIKit.UIViewController, _ event: Swift.String, onCallbackEvent: @escaping (_ mopinionEvent: MopinionSDK.MopinionCallbackEvent, _ response: MopinionSDK.MopinionResponse) -> Swift.Void, onCallbackEventError: ((_ mopinionEvent: MopinionSDK.MopinionCallbackEvent, _ response: MopinionSDK.MopinionResponse) -> Swift.Void)?)
  public func event(_ parentView: UIKit.UIViewController, _ event: Swift.String, onCallbackEventDelegate: (any MopinionSDK.MopinionCallbackEventDelegate)?, onCallbackEventErrorDelegate: (any MopinionSDK.MopinionCallbackEventErrorDelegate)?)
  public func event(_ parentView: UIKit.UIViewController, _ event: Swift.String, onCallbackEventDelegate: (any MopinionSDK.MopinionCallbackEventDelegate)?)
  public func event(_ parentView: UIKit.UIViewController, _ event: Swift.String)
  @available(*, deprecated, message: "From 0.6.1 use openFormAlways(:formKey:forEvent) instead")
  public func openFormAlways(_ parentView: UIKit.UIViewController, _ formKey: Swift.String)
  public func openFormAlways(_ parentView: UIKit.UIViewController, formKey: Swift.String, forEvent: Swift.String)
  public func data(_ k: Swift.String, _ v: Swift.String)
  public func removeData(forKey k: Swift.String)
  public func removeData()
  public func evaluate(_ event: Swift.String, onEvaluateDelegate: any MopinionSDK.MopinionOnEvaluateDelegate)
  public func emptyCache()
  public func close()
  public func cleanCache()
  public func setLog(_ on: Swift.Bool = false)
  public func semanticVersionString() -> Swift.String
  @objc deinit
}
extension MopinionSDK.Mopinion : MopinionSDK.MopinionFormDelegate {
  public func onMopinionFormLoadFailedCallBack(_ jsonString: Swift.String?, error: (any Swift.Error)?)
  public func onMopinionFormLoadedCallBack()
  public func onMopinionFormOpenCallBack(_ jsonString: Swift.String?)
  public func onMopinionFormCloseCallBack(_ jsonString: Swift.String?)
  public func onMopinionFormFeedbackSentCallBack(_ jsonString: Swift.String?)
}
public protocol MopinionFormDelegate : AnyObject {
  func onMopinionFormLoadFailedCallBack(_ jsonString: Swift.String?, error: (any Swift.Error)?)
  func onMopinionFormLoadedCallBack()
  func onMopinionFormOpenCallBack(_ jsonString: Swift.String?)
  func onMopinionFormCloseCallBack(_ jsonString: Swift.String?)
  func onMopinionFormFeedbackSentCallBack(_ jsonString: Swift.String?)
}
public let MopinionErrorDomain: Swift.String
@objc public enum MopinionError : Swift.Int, Swift.Error {
  case deploymentLoadFailed
  case deploymentLoadTimedOut
  case formConfigLoadFailed
  case formConfigLoadTimedOut
  case formConfigFormNotFound
  case internalError
  case submitFeedbackFailed
  case submitFeedbackTimedOut
  case submitImageFailed
  case submitImageTimedOut
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension MopinionSDK.MopinionError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol MopinionOnEvaluateDelegate : AnyObject {
  func mopinionOnEvaluateHandler(hasResult: Swift.Bool, event: Swift.String, formKey: Swift.String?, response: [Swift.String : Any]?)
}
@objc public enum MopinionCallbackEvent : Swift.Int {
  case FORM_CLOSED, FORM_OPEN, FORM_SENT, NO_FORM_WILL_OPEN
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ResponseDataKey : Swift.Int {
  case DATA_JSONOBJECT, FORM_KEY, FORM_NAME
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class MopinionResponse : ObjectiveC.NSObject {
  @objc public func hasData() -> Swift.Bool
  @objc public func hasData(forKey: MopinionSDK.ResponseDataKey) -> Swift.Bool
  @objc public func didSucceed() -> Swift.Bool
  @objc public func hasErrors() -> Swift.Bool
  public func getData(_ forKey: MopinionSDK.ResponseDataKey) -> Swift.String?
  public func getData(_ forKey: MopinionSDK.ResponseDataKey) -> [Any]?
  @objc public func getData(_ forKey: MopinionSDK.ResponseDataKey) -> [Swift.String : Any]?
  @objc public func getError() -> (any Swift.Error)?
  @objc public func getJSONArray(_ forKey: MopinionSDK.ResponseDataKey) -> [Any]?
  @objc public func getJSONObject(_ forKey: MopinionSDK.ResponseDataKey) -> [Swift.String : Any]?
  @objc public func getString(_ forKey: MopinionSDK.ResponseDataKey) -> Swift.String?
  @objc deinit
}
public protocol MopinionCallbackEventDelegate : AnyObject {
  func onMopinionEvent(mopinionEvent: MopinionSDK.MopinionCallbackEvent, response: MopinionSDK.MopinionResponse)
}
public protocol MopinionCallbackEventErrorDelegate : AnyObject {
  func onMopinionEventError(mopinionEvent: MopinionSDK.MopinionCallbackEvent, response: MopinionSDK.MopinionResponse)
}
extension MopinionSDK.MopinionError : Swift.Equatable {}
extension MopinionSDK.MopinionError : Swift.Hashable {}
extension MopinionSDK.MopinionError : Swift.RawRepresentable {}
extension MopinionSDK.MopinionCallbackEvent : Swift.Equatable {}
extension MopinionSDK.MopinionCallbackEvent : Swift.Hashable {}
extension MopinionSDK.MopinionCallbackEvent : Swift.RawRepresentable {}
extension MopinionSDK.ResponseDataKey : Swift.Equatable {}
extension MopinionSDK.ResponseDataKey : Swift.Hashable {}
extension MopinionSDK.ResponseDataKey : Swift.RawRepresentable {}
